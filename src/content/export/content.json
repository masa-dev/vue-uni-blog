[{"property":{"fileName":"2021-03-05","title":"サイトの構成の変更"},"body":"<h2 id=\"サイトの構成の変更\">サイトの構成の変更</h2>\n<h3 id=\"経緯とか\">経緯とか</h3>\n<p>今までは、それぞれのページのHTMLを書いていましたが、これからはVue.jsを用いてビルド出力することにしました。</p>\n<p>理由としては、HTMLをそれぞれのページごとに用意すると、仕様変更の手間が大きいためです。例えば、フッターのテキストを変更したい場合に、すべてのHTMLのフッターを書き換えるのはかなりの手間です。</p>\n<p>そのため、Vue.jsのように各タグや要素などをテンプレートとして扱うイメージのパッケージを選択しました。このメリットは、Vue.jsがそれぞれのテンプレートを組み合わせてHTMLファイルを構成するため、変更部分が少なくなり、楽になります。</p>\n<h3 id=\"このサイトについて\">このサイトについて</h3>\n<p>このサイトの場合だと、ローカル環境でビルドして出力されたフォルダ（distフォルダ）をそのままFTPサイトにアップロードしています。</p>\n<p>実際のコードはGithubで公開しています。</p>\n<blockquote>\n<p><a href=\"https://github.com/masa-dev/vue-uni-blog\">https://github.com/masa-dev/vue-uni-blog</a></p>\n</blockquote>\n"},{"property":{"fileName":"2021-04-12","title":"JavaScriptのプライベートについて"},"body":"<h2 id=\"javascriptのプライベートについて\">JavaScriptのプライベートについて</h2>\n<p>まぁまぁ前の話ですが、初めて知ったことだったのでメモ程度に書き留めておきます。</p>\n<h3 id=\"プライベートとは\">プライベートとは</h3>\n<p>プライベートはオブジェクト指向における関数や変数のアクセス性に関わるもので、このアクセス制限をすることでより安全性の高いプログラムにすることが目的です。</p>\n<p>この概念がしっかりとしている言語として、PHPやJavaなどがあります。</p>\n<h3 id=\"書き方\">書き方</h3>\n<p>基本的には、クラス内の変数と関数のはじめに <strong>#</strong> を付けることでその変数/関数をプライベートとして扱うことが出来ます。ただ、Javaのように可視化について細かくは分かれてはいないようです。</p>\n<p>注意すべき点としては、これが <strong>実験的な提案</strong> と書かれている点です。一部ブラウザや古いバージョンのNode.jsでは使えないため、注意が必要です。</p>\n<p>例は以下の通りです。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Sample</span> </span>{\n  #private = <span class=\"hljs-string\">&#x27;foo&#x27;</span>\n  public = <span class=\"hljs-string\">&#x27;bar&#x27;</span>\n}\n\n<span class=\"hljs-keyword\">let</span> sample = <span class=\"hljs-keyword\">new</span> Sample()\n\n\n<span class=\"hljs-comment\">// パブリックフィールドは普通にアクセスできる</span>\n<span class=\"hljs-built_in\">console</span>.log(sample.public)\n<span class=\"hljs-comment\">/* &gt; bar */</span>\n\n\n<span class=\"hljs-comment\">// プライベートフィールドはクラス外からはアクセスできない</span>\n<span class=\"hljs-built_in\">console</span>.log(sample.#private)\n<span class=\"hljs-comment\">/* \nconsole.log(sample.#private)\n                  ^\n\nSyntaxError: Private field &#x27;#private&#x27; must be declared in an enclosing class\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n*/</span>\n</code></pre>\n"},{"property":{"fileName":"2021-04-26","title":"クロージャ"},"body":"<h2 id=\"クロージャ\">クロージャ</h2>\n<p>今回はクロージャについての話です。</p>\n<h3 id=\"クロージャとは\">クロージャとは</h3>\n<p>MDNでは以下の様に説明されています。</p>\n<blockquote>\n<p>クロージャは、組み合わされた（囲まれた）関数と、その周囲の状態（レキシカル環境）への参照の組み合わせです。言い換えれば、クロージャは内側の関数から外側の関数スコープへのアクセスを提供します。JavaScript では、関数が作成されるたびにクロージャが作成されます。</p>\n</blockquote>\n<p>簡単に言うと、関数を出力する関数のようなイメージです。</p>\n<h3 id=\"具体例\">具体例</h3>\n<pre><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeFunc</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;Sample&#x27;</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    alert(str);\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> func = makeFunc();\nfunc();\n</code></pre>\n<p>このコードを実行すると、変数strの文字列が出力されます。makeFuncは関数内の変数strを出力する関数を返します。</p>\n<h3 id=\"クロージャを使うメリット\">クロージャを使うメリット</h3>\n<p>クロージャを用いるメリットは、主に変数を関数内でプライベート化することでグローバル変数を減らすことです。</p>\n<p>以下のように、グローバルで定義していた変数を関数内でカプセル化することで、コード内のグローバル変数を減らすことが出来ます。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-comment\">// 変更前のコード</span>\n<span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-number\">1</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">count</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> num++\n}\n\n<span class=\"hljs-built_in\">console</span>.log(count()); <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(count()); <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n<pre><code class=\"javascript\"><span class=\"hljs-comment\">// 変更後のコード</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeCounter</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> num++;\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> count = makeCounter();\n<span class=\"hljs-built_in\">console</span>.log(count()); <span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-built_in\">console</span>.log(count()); <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n<p>上記のコードは両方ともグローバル変数の数としては同じですが、不要な変数をプライベート化して無くすことが出来ています。</p>\n<p>さらに工夫すると複数の関数を定義したり、プライベートメソッドのようなことも実装出来たりします。</p>\n<h3 id=\"参考\">参考</h3>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures\">クロージャ - JavaScript | MDN</a></p>\n</blockquote>\n"},{"property":{"fileName":"2021-05-11","title":"JavaScriptで使われる構文など"},"body":"<h2 id=\"javascriptで使われる構文など\">JavaScriptで使われる構文など</h2>\n<h3 id=\"条件-三項-演算子\">条件 (三項) 演算子</h3>\n<p>一見意味不明な文字列に見えますが、JavaScriptに限らず、様々な言語でサポートされている構文です。</p>\n<p>簡単なif文を省略する目的で使ったりしますが、直感的に分かりにくい構文であるため、多用すると処理が分かりにくくなります。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-comment\">// a と b の最大値を求める処理</span>\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">if</span> (a &gt; b) {\n    max = a;\n} <span class=\"hljs-keyword\">else</span> {\n    max = b;\n}\n\n\n<span class=\"hljs-comment\">// 上記の処理を条件演算子で書いた場合の処理</span>\n<span class=\"hljs-comment\">// 書き方は、「条件 ? trueの場合の戻り値 : falseの場合の戻り値」</span>\n<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span>, b = <span class=\"hljs-number\">2</span>;\n<span class=\"hljs-keyword\">let</span> max = a &gt; b ? a : b;\n</code></pre>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">条件 (三項) 演算子 - JavaScript | MDN</a></p>\n</blockquote>\n<h3 id=\"スプレッド構文\">スプレッド構文</h3>\n<p>ピリオドを3つ連ねることで表現します。</p>\n<p>基本的には配列を個々の要素に展開することができる構文です。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span> (<span class=\"hljs-params\">x, y, z</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> x + y + z;\n}\n\n<span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-built_in\">console</span>.log(sum(...arr));\n<span class=\"hljs-comment\">// &gt; 6</span>\n</code></pre>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">スプレッド構文 - JavaScript | MDN\n</a></p>\n</blockquote>\n<h3 id=\"for-of\">for of</h3>\n<p>スプレッド構文を紹介したついでに紹介します。</p>\n<p>for of 文は、配列を展開して配列の要素数繰り返します。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>];\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> num <span class=\"hljs-keyword\">of</span> arr) {\n    <span class=\"hljs-built_in\">console</span>.log(num);\n}\n<span class=\"hljs-comment\">/*\n&gt; 1\n&gt; 2\n&gt; 3\n*/</span>\n</code></pre>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/for...of\">グローバル Web アイコンfor...of - JavaScript | MDN</a></p>\n</blockquote>\n"},{"property":{"fileName":"2021-05-18","title":"非同期処理とコールバック"},"body":"<h2 id=\"非同期処理とコールバック\">非同期処理とコールバック</h2>\n<h3 id=\"非同期処理について\">非同期処理について</h3>\n<p>JavaScriptの非同期処理の代表例として、setTimeout と setInterval があります。また、サーバーへデータを送受信するような時間のかかってしまう場合に非同期処理を用います。</p>\n<p>以下に非同期処理の簡単な例を紹介します。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;func が実行されました。&#x27;</span>);\n}\n\n\ntime_ms = <span class=\"hljs-number\">1000</span>;\n<span class=\"hljs-built_in\">setTimeout</span>(func, time_ms);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;プログラムを終了します。&#x27;</span>);\n\n<span class=\"hljs-comment\">// &gt; プログラムを終了します。</span>\n<span class=\"hljs-comment\">// &gt; func が実行されました。</span>\n</code></pre>\n<p>このコードでは、setTimeoutの方が先に実行されているにもかかわらず、その後の出力の後にsetTimeoutの処理が実行されています。</p>\n<p>このように、JavaScriptには同期処理と非同期処理が存在し、非同期関数を同期的に使ってしまうと思わぬエラーを招いてしまいます。</p>\n<h3 id=\"コールバック\">コールバック</h3>\n<p>非同期処理は便利ですが、非同期と同期を混合することを避ける必要があるため、そのままでは少し使いにくい仕組みです。</p>\n<p>そのため、非同期処理を同期的に実行させる方法がいくつかあります。</p>\n<ul>\n<li>コールバック</li>\n<li>Promise</li>\n<li>async / await</li>\n</ul>\n<p>今回はコールバックについて説明します。</p>\n<p>コールバックの書き方は以下の通りです。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">introduce</span>(<span class=\"hljs-params\">name</span>) </span>{\n    alert(<span class=\"hljs-string\">`私の名前は<span class=\"hljs-subst\">${name}</span>です。`</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">inputMyName</span>(<span class=\"hljs-params\">callback <span class=\"hljs-comment\">/* 次に実行させる関数 */</span></span>) </span>{\n    <span class=\"hljs-keyword\">let</span> name = prompt(<span class=\"hljs-string\">&#x27;名前を入力してください。&#x27;</span>);\n    callback(name);\n}\n\ninputMyName(introduce);\n</code></pre>\n<p>inputMyName が実行された後、コールバックによって introduce が呼ばれています。</p>\n<p>このコールバックを用いることで非同期関数を実行した後に別の関数や処理を実行させることが出来、非同期処理を同期的に書くことが出来ます。</p>\n<p>しかし、コールバックを繋げすぎると見栄えが悪く、見にくいコードになってしまいます。これはコールバック地獄といわれています。以下がその例です。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n\nfs.readFile(<span class=\"hljs-string\">&#x27;data1.txt&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data1</span>) </span>{\n    fs.readFile(<span class=\"hljs-string\">&#x27;data2.txt&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data2</span>) </span>{\n        fs.readFile(<span class=\"hljs-string\">&#x27;data3.txt&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data3</span>) </span>{\n            fs.readFile(<span class=\"hljs-string\">&#x27;data4.txt&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data4</span>) </span>{\n                fs.readFile(<span class=\"hljs-string\">&#x27;data5.txt&#x27;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data5</span>) </span>{\n                    <span class=\"hljs-built_in\">console</span>.log(data1 + data2 + data3 + data4 + data5);\n                })\n            })\n        })\n    })\n})\n</code></pre>\n<p>うわぁ...</p>\n<blockquote>\n<p><a href=\"https://qiita.com/umeko2015/items/2fdb2785eac8f4117f23\">コールバック地獄からの脱出 - Qiita</a></p>\n</blockquote>\n<h3 id=\"おまけ---非同期処理\">おまけ - 非同期処理</h3>\n<p>setTimeout以外の非同期処理の書き方は以下の方法があります。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-comment\">// Node.js用</span>\nprocess.nextTick(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Node.js用の非同期処理&#x27;</span>)\n})\n\n<span class=\"hljs-comment\">// ブラウザ、Node.js共用</span>\nqueueMicrotask(<span class=\"hljs-function\">()=&gt;</span> {\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;ブラウザ、Node.js共用の非同期処理&#x27;</span>)\n})\n</code></pre>\n"},{"property":{"fileName":"2021-06-15","title":"分割代入"},"body":"<h2 id=\"分割代入\">分割代入</h2>\n<p>いまだにPromiseについて完全に理解していないので、今回は自分が知っていることについて紹介します。意外と知らないこともあったのでそこも含めて説明できるように頑張ります。</p>\n<h3 id=\"分割代入について\">分割代入について</h3>\n<p>分割代入は、ES6で実装された機能のことで、配列またはオブジェクトのプロパティから値を取り出して別の変数に代入する式のことです。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> rest; <span class=\"hljs-comment\">// 余り</span>\n<span class=\"hljs-keyword\">let</span> a, b;\n[a, b] = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>];\n\n<span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">// 10</span>\n<span class=\"hljs-built_in\">console</span>.log(b); <span class=\"hljs-comment\">// 20</span>\n\n\n<span class=\"hljs-comment\">// 余った要素をスプレッド構文で rest に代入する</span>\n[a, b, ...rest] = [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>, <span class=\"hljs-number\">40</span>, <span class=\"hljs-number\">50</span>];\n<span class=\"hljs-built_in\">console</span>.log(rest); <span class=\"hljs-comment\">// Array(3) [ 30, 40, 50 ]</span>\n</code></pre>\n<p>オブジェクトの場合は書き方が異なり、{}で囲います。\nまた、宣言以外のオブジェクトの代入は、全体を()でさらに囲います。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> a, b;\n\n<span class=\"hljs-comment\">// 宣言以外のオブジェクトの代入は、()で囲う</span>\n({a, b} = {<span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">b</span>:<span class=\"hljs-number\">20</span>});\n<span class=\"hljs-built_in\">console</span>.log(a, b); <span class=\"hljs-comment\">//10, 20</span>\n</code></pre>\n<h3 id=\"使い道\">使い道</h3>\n<p>使い道をいくつか説明します。</p>\n<h4 id=\"入れ替え\">入れ替え</h4>\n<p>変数の入れ替えをする時によく用います。</p>\n<p>分割代入を使えば一時変数を用いずに記述できるためとても見やすくなります。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">10</span>\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">20</span>;\n\n<span class=\"hljs-comment\">// 普通の入れ替え</span>\n<span class=\"hljs-keyword\">let</span> temp;\ntemp = a;\na = b;\nb = temp;\n\n<span class=\"hljs-built_in\">console</span>.log(a, b); <span class=\"hljs-comment\">// 20 10</span>\n\n\n<span class=\"hljs-comment\">// 分割代入を用いた入れ替え</span>\n[a, b] = [b, a];\n\n<span class=\"hljs-built_in\">console</span>.log(a, b); <span class=\"hljs-comment\">// 10 20</span>\n</code></pre>\n<h4 id=\"複数の戻り値\">複数の戻り値</h4>\n<p>分割代入を使うことで複数の戻り値を出力することが出来ます。</p>\n<p>関数で複数の戻り値を扱いたいときに使えます。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">returnArrayFunc</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>];\n}\n\n<span class=\"hljs-keyword\">let</span> a, b;\n[a, b] = returnArrayFunc();\n\n<span class=\"hljs-built_in\">console</span>.log(a, b); <span class=\"hljs-comment\">// 10 20</span>\n</code></pre>\n<h3 id=\"注意点\">注意点</h3>\n<ul>\n<li>変数宣言とオブジェクトの分割代入を別に行う場合は、分割代入の式全体を()で囲ってないとエラーになる</li>\n<li>分割代入の前に入る文がブロックでない場合に、文末にセミコロンが無いとエラーになる</li>\n</ul>\n<h3 id=\"おわり\">おわり</h3>\n<p>NodeJSでもモジュールから変数や関数をインポートする際によく使われるので、覚えておいて損はないと思います。</p>\n<h3 id=\"参考\">参考</h3>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">分割代入 - JavaScript | MDN</a><br><a href=\"https://chaika.hatenablog.com/entry/2018/10/12/090000\">JavaScript (ES2015) 分割代入でセミコロンがないとエラーになるトラップにはまる。 - かもメモ</a></p>\n</blockquote>\n"},{"property":{"fileName":"2021-06-28","title":"ES2021とかで興味を持ったものとか"},"body":"<h2 id=\"es2021とかで興味を持ったものとか\">ES2021とかで興味を持ったものとか</h2>\n<p>記事を読んでておもしろかったため、紹介します。</p>\n<h3 id=\"数字の区切り\">数字の区切り</h3>\n<p>数字をアンダースコア（_）で区切ることが出来ます。大きい数字を扱う時に見やすくなります。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> num = <span class=\"hljs-number\">123_456_789</span>;\n\n<span class=\"hljs-built_in\">console</span>.log(num);\n<span class=\"hljs-comment\">// &gt; 123456789</span>\n</code></pre>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Lexical_grammar#numeric_separators\">数値の区切り文字 - MDN</a></p>\n</blockquote>\n<h3 id=\"replaceall\">replaceAll</h3>\n<p>既存のreplace関数では、はじめにマッチした文字列しか置換しませんでしたが、replaceAll関数はマッチしたすべての文字列を置換できます。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> str = <span class=\"hljs-string\">&#x27;abc abc abc&#x27;</span>;\n\nstr.replace(<span class=\"hljs-string\">&#x27;abc&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>); \n<span class=\"hljs-comment\">// &quot;x abc abc&quot;</span>\n\nstr.replaceAll(<span class=\"hljs-string\">&#x27;abc&#x27;</span>, <span class=\"hljs-string\">&#x27;x&#x27;</span>);\n<span class=\"hljs-comment\">// &quot;x x x&quot;</span>\n</code></pre>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll\">String.prototype.replaceAll() - JavaScript | MDN</a></p>\n</blockquote>\n<h3 id=\"様々な演算子「」、「」、「」\">様々な演算子「??=」、「||=」、「&amp;&amp;=」</h3>\n<h4 id=\"null-合体代入-\">Null 合体代入 (??=)</h4>\n<p>左辺がnullish（null または undefined）である場合にのみ代入します。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> obj = { <span class=\"hljs-attr\">num1</span>: <span class=\"hljs-number\">10</span> };\n\nobj.num1 ??= <span class=\"hljs-number\">99</span>;\n<span class=\"hljs-built_in\">console</span>.log(obj.num1);\n<span class=\"hljs-comment\">// &gt; 10</span>\n\nobj.num2 ??= <span class=\"hljs-number\">500</span>;\n<span class=\"hljs-built_in\">console</span>.log(obj.num2);\n<span class=\"hljs-comment\">// &gt; 500</span>\n</code></pre>\n<h4 id=\"論理和代入-\">論理和代入 (||=)</h4>\n<p>左辺が<a href=\"https://developer.mozilla.org/ja/docs/Glossary/Falsy\">falsy</a>（Boolean コンテキストに現れたときに偽とみなされる値）である場合にのみ代入します。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> obj = { <span class=\"hljs-attr\">num</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">str</span>: <span class=\"hljs-string\">&#x27;&#x27;</span> };\n\nobj.num ||= <span class=\"hljs-number\">99</span>;\n<span class=\"hljs-built_in\">console</span>.log(obj.num);\n<span class=\"hljs-comment\">// &gt; 10</span>\n\nobj.str ||= <span class=\"hljs-string\">&#x27;sample&#x27;</span>;\n<span class=\"hljs-built_in\">console</span>.log(obj.str);\n<span class=\"hljs-comment\">// &gt; sample</span>\n</code></pre>\n<h4 id=\"論理積代入-\">論理積代入 (&amp;&amp;=)</h4>\n<p>左辺が<a href=\"https://developer.mozilla.org/ja/docs/Glossary/Truthy\">truthy</a>（Boolean コンテキストに現れたときに真とみなされる値）である場合にのみ代入します。</p>\n<pre><code class=\"javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-literal\">false</span>;\n\na &amp;&amp;= <span class=\"hljs-string\">&#x27;This is truthy&#x27;</span>;\n<span class=\"hljs-built_in\">console</span>.log(a);\n<span class=\"hljs-comment\">// &gt; This is truthy</span>\n\nb &amp;&amp;= <span class=\"hljs-string\">&#x27;This is truthy&#x27;</span>;\n<span class=\"hljs-built_in\">console</span>.log(b);\n<span class=\"hljs-comment\">// &gt; false</span>\n</code></pre>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment\">Null 合体代入 (??=) - JavaScript | MDN</a><br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment\">論理和代入 (||=) - JavaScript | MDN</a><br><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment\">論理積代入 (&amp;&amp;=) - JavaScript | MDN</a></p>\n</blockquote>\n<h3 id=\"参考\">参考</h3>\n<blockquote>\n<p><a href=\"https://zenn.dev/tonkotsuboy_com/articles/es2021-whats-new\">正式仕様リリース！ JavaScriptの最新仕様ES2021で追加された新機能まとめ</a></p>\n</blockquote>\n"},{"property":{"fileName":"2021-07-06","title":"URLでGoogleカレンダーに登録する"},"body":"<h2 id=\"urlでgoogleカレンダーに登録する\">URLでGoogleカレンダーに登録する</h2>\n<p>URLを入力するだけで簡単にGoogleカレンダーに登録できます。</p>\n<p>リマインドとかに使えるかな、と思ったので共有します。</p>\n<h3 id=\"やり方\">やり方</h3>\n<p>ベースのURLにURLパラメータを入力すれば出来ます。</p>\n<pre><code># ベースのURL\nhttps://www.google.com/calendar/event?action=TEMPLATE\n</code></pre>\n<p>入力できるパラメータは以下の通りです。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">パラメータ</th>\n<th align=\"left\">入力値</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">text</td>\n<td align=\"left\">タイトル</td>\n</tr>\n<tr>\n<td align=\"left\">location</td>\n<td align=\"left\">場所</td>\n</tr>\n<tr>\n<td align=\"left\">details</td>\n<td align=\"left\">説明</td>\n</tr>\n<tr>\n<td align=\"left\">dates</td>\n<td align=\"left\">開始時間と終了時間</td>\n</tr>\n<tr>\n<td align=\"left\">add</td>\n<td align=\"left\">招待するメールアドレス</td>\n</tr>\n</tbody></table>\n<pre><code># 例\nhttps://www.google.com/calendar/event?action=TEMPLATE&amp;text=ダミーミーティング&amp;dates=20210801T130000/20210801T140000&amp;location=〒739-2116 広島県東広島市高屋うめの辺１−１\n\n# 日時指定の方法\n時間を指定して/で開始時間と終了時間を区切ります。\n\n  2021年08月01日13時00分00秒\n      ↓\n  2021＿08＿01T 13＿00＿00\n      ↓\n  20210801T130000\n</code></pre>\n<h3 id=\"参考\">参考</h3>\n<blockquote>\n<p><a href=\"https://qiita.com/_am_/items/30a09a23bfa3be0dc135\">googleカレンダーにURLで簡単に登録</a></p>\n</blockquote>\n"}]